package {{snake packageName}}

import (
	"context"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	{{#unless skeletonStructure}}
	"fmt"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
		
	"terraform-provider-genesyscloud/genesyscloud/provider"
	"terraform-provider-genesyscloud/genesyscloud/util"
	{{/unless}}
)
/*
   The data_source_genesyscloud_{{snake packageName}}.go contains the data source implementation
   for the resource.
*/

// dataSource{{pascal packageName}}Read retrieves by name the id in question
func dataSource{{pascal packageName}}Read(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	{{#unless skeletonStructure}}
	sdkConfig := meta.(*provider.ProviderMeta).ClientConfig
	proxy := new{{pascal packageName}}Proxy(sdkConfig)

	name := d.Get("name").(string)

	return util.WithRetries(ctx, 15*time.Second, func() *retry.RetryError {
		{{name}}Id, resp, retryable, err := proxy.get{{pascal packageName}}IdByName(ctx, name)

		if err != nil && !retryable {
			return retry.NonRetryableError(util.BuildWithRetriesApiDiagnosticError(ResourceType, fmt.Sprintf("Error searching {{english packageName}} %s | error: %s", name, err), resp))
		}

		if retryable {
			return retry.RetryableError(util.BuildWithRetriesApiDiagnosticError(ResourceType, fmt.Sprintf("No {{english packageName}} found with name %s", name), resp))
		}

		d.SetId({{name}}Id)
		return nil
	})
	{{/unless}}
	{{#if skeletonStructure}}
	return nil
	{{/if}}
}
